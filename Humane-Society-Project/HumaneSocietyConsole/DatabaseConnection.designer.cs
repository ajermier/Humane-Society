#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HumaneSocietyConsole
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Humane-Society")]
	public partial class DatabaseConnectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnimal(Animal instance);
    partial void UpdateAnimal(Animal instance);
    partial void DeleteAnimal(Animal instance);
    partial void InsertAnimalSpecy(AnimalSpecy instance);
    partial void UpdateAnimalSpecy(AnimalSpecy instance);
    partial void DeleteAnimalSpecy(AnimalSpecy instance);
    partial void InsertAdopter(Adopter instance);
    partial void UpdateAdopter(Adopter instance);
    partial void DeleteAdopter(Adopter instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    #endregion
		
		public DatabaseConnectionDataContext() : 
				base(global::HumaneSocietyConsole.Properties.Settings.Default.Humane_SocietyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Animal> Animals
		{
			get
			{
				return this.GetTable<Animal>();
			}
		}
		
		public System.Data.Linq.Table<AnimalSpecy> AnimalSpecies
		{
			get
			{
				return this.GetTable<AnimalSpecy>();
			}
		}
		
		public System.Data.Linq.Table<Adopter> Adopters
		{
			get
			{
				return this.GetTable<Adopter>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animal")]
	public partial class Animal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnimalID;
		
		private int _AnimalSpecies;
		
		private string _AnimalName;
		
		private string _AnimalSex;
		
		private int _AnimalAge;
		
		private double _AnimalWeight;
		
		private string _AnimalColor;
		
		private double _AnimalFood;
		
		private bool _AnimalShots;
		
		private bool _AnimalAdopted;
		
		private System.Nullable<int> _AnimalAdopterID;
		
		private EntityRef<AnimalSpecy> _AnimalSpecy;
		
		private EntityRef<Adopter> _Adopter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnimalIDChanging(int value);
    partial void OnAnimalIDChanged();
    partial void OnAnimalSpeciesChanging(int value);
    partial void OnAnimalSpeciesChanged();
    partial void OnAnimalNameChanging(string value);
    partial void OnAnimalNameChanged();
    partial void OnAnimalSexChanging(string value);
    partial void OnAnimalSexChanged();
    partial void OnAnimalAgeChanging(int value);
    partial void OnAnimalAgeChanged();
    partial void OnAnimalWeightChanging(double value);
    partial void OnAnimalWeightChanged();
    partial void OnAnimalColorChanging(string value);
    partial void OnAnimalColorChanged();
    partial void OnAnimalFoodChanging(double value);
    partial void OnAnimalFoodChanged();
    partial void OnAnimalShotsChanging(bool value);
    partial void OnAnimalShotsChanged();
    partial void OnAnimalAdoptedChanging(bool value);
    partial void OnAnimalAdoptedChanged();
    partial void OnAnimalAdopterIDChanging(System.Nullable<int> value);
    partial void OnAnimalAdopterIDChanged();
    #endregion
		
		public Animal()
		{
			this._AnimalSpecy = default(EntityRef<AnimalSpecy>);
			this._Adopter = default(EntityRef<Adopter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnimalID
		{
			get
			{
				return this._AnimalID;
			}
			set
			{
				if ((this._AnimalID != value))
				{
					this.OnAnimalIDChanging(value);
					this.SendPropertyChanging();
					this._AnimalID = value;
					this.SendPropertyChanged("AnimalID");
					this.OnAnimalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalSpecies", DbType="Int NOT NULL")]
		public int AnimalSpecies
		{
			get
			{
				return this._AnimalSpecies;
			}
			set
			{
				if ((this._AnimalSpecies != value))
				{
					if (this._AnimalSpecy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimalSpeciesChanging(value);
					this.SendPropertyChanging();
					this._AnimalSpecies = value;
					this.SendPropertyChanged("AnimalSpecies");
					this.OnAnimalSpeciesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AnimalName
		{
			get
			{
				return this._AnimalName;
			}
			set
			{
				if ((this._AnimalName != value))
				{
					this.OnAnimalNameChanging(value);
					this.SendPropertyChanging();
					this._AnimalName = value;
					this.SendPropertyChanged("AnimalName");
					this.OnAnimalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalSex", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AnimalSex
		{
			get
			{
				return this._AnimalSex;
			}
			set
			{
				if ((this._AnimalSex != value))
				{
					this.OnAnimalSexChanging(value);
					this.SendPropertyChanging();
					this._AnimalSex = value;
					this.SendPropertyChanged("AnimalSex");
					this.OnAnimalSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalAge", DbType="Int NOT NULL")]
		public int AnimalAge
		{
			get
			{
				return this._AnimalAge;
			}
			set
			{
				if ((this._AnimalAge != value))
				{
					this.OnAnimalAgeChanging(value);
					this.SendPropertyChanging();
					this._AnimalAge = value;
					this.SendPropertyChanged("AnimalAge");
					this.OnAnimalAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalWeight", DbType="Float NOT NULL")]
		public double AnimalWeight
		{
			get
			{
				return this._AnimalWeight;
			}
			set
			{
				if ((this._AnimalWeight != value))
				{
					this.OnAnimalWeightChanging(value);
					this.SendPropertyChanging();
					this._AnimalWeight = value;
					this.SendPropertyChanged("AnimalWeight");
					this.OnAnimalWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalColor", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AnimalColor
		{
			get
			{
				return this._AnimalColor;
			}
			set
			{
				if ((this._AnimalColor != value))
				{
					this.OnAnimalColorChanging(value);
					this.SendPropertyChanging();
					this._AnimalColor = value;
					this.SendPropertyChanged("AnimalColor");
					this.OnAnimalColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalFood", DbType="Float NOT NULL")]
		public double AnimalFood
		{
			get
			{
				return this._AnimalFood;
			}
			set
			{
				if ((this._AnimalFood != value))
				{
					this.OnAnimalFoodChanging(value);
					this.SendPropertyChanging();
					this._AnimalFood = value;
					this.SendPropertyChanged("AnimalFood");
					this.OnAnimalFoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalShots", DbType="Bit NOT NULL")]
		public bool AnimalShots
		{
			get
			{
				return this._AnimalShots;
			}
			set
			{
				if ((this._AnimalShots != value))
				{
					this.OnAnimalShotsChanging(value);
					this.SendPropertyChanging();
					this._AnimalShots = value;
					this.SendPropertyChanged("AnimalShots");
					this.OnAnimalShotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalAdopted", DbType="Bit NOT NULL")]
		public bool AnimalAdopted
		{
			get
			{
				return this._AnimalAdopted;
			}
			set
			{
				if ((this._AnimalAdopted != value))
				{
					this.OnAnimalAdoptedChanging(value);
					this.SendPropertyChanging();
					this._AnimalAdopted = value;
					this.SendPropertyChanged("AnimalAdopted");
					this.OnAnimalAdoptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalAdopterID", DbType="Int")]
		public System.Nullable<int> AnimalAdopterID
		{
			get
			{
				return this._AnimalAdopterID;
			}
			set
			{
				if ((this._AnimalAdopterID != value))
				{
					if (this._Adopter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimalAdopterIDChanging(value);
					this.SendPropertyChanging();
					this._AnimalAdopterID = value;
					this.SendPropertyChanged("AnimalAdopterID");
					this.OnAnimalAdopterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimalSpecy_Animal", Storage="_AnimalSpecy", ThisKey="AnimalSpecies", OtherKey="SpeciesID", IsForeignKey=true)]
		public AnimalSpecy AnimalSpecy
		{
			get
			{
				return this._AnimalSpecy.Entity;
			}
			set
			{
				AnimalSpecy previousValue = this._AnimalSpecy.Entity;
				if (((previousValue != value) 
							|| (this._AnimalSpecy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnimalSpecy.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._AnimalSpecy.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._AnimalSpecies = value.SpeciesID;
					}
					else
					{
						this._AnimalSpecies = default(int);
					}
					this.SendPropertyChanged("AnimalSpecy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adopter_Animal", Storage="_Adopter", ThisKey="AnimalAdopterID", OtherKey="AdopterID", IsForeignKey=true)]
		public Adopter Adopter
		{
			get
			{
				return this._Adopter.Entity;
			}
			set
			{
				Adopter previousValue = this._Adopter.Entity;
				if (((previousValue != value) 
							|| (this._Adopter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adopter.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Adopter.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._AnimalAdopterID = value.AdopterID;
					}
					else
					{
						this._AnimalAdopterID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Adopter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnimalSpecies")]
	public partial class AnimalSpecy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpeciesID;
		
		private string _SpeciesName;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpeciesIDChanging(int value);
    partial void OnSpeciesIDChanged();
    partial void OnSpeciesNameChanging(string value);
    partial void OnSpeciesNameChanged();
    #endregion
		
		public AnimalSpecy()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeciesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpeciesID
		{
			get
			{
				return this._SpeciesID;
			}
			set
			{
				if ((this._SpeciesID != value))
				{
					this.OnSpeciesIDChanging(value);
					this.SendPropertyChanging();
					this._SpeciesID = value;
					this.SendPropertyChanged("SpeciesID");
					this.OnSpeciesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeciesName", DbType="VarChar(255)")]
		public string SpeciesName
		{
			get
			{
				return this._SpeciesName;
			}
			set
			{
				if ((this._SpeciesName != value))
				{
					this.OnSpeciesNameChanging(value);
					this.SendPropertyChanging();
					this._SpeciesName = value;
					this.SendPropertyChanged("SpeciesName");
					this.OnSpeciesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimalSpecy_Animal", Storage="_Animals", ThisKey="SpeciesID", OtherKey="AnimalSpecies")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.AnimalSpecy = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.AnimalSpecy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Adopter")]
	public partial class Adopter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdopterID;
		
		private int _AdopterName;
		
		private System.Nullable<int> _AdopterPhone;
		
		private bool _AdopterHomeOwner;
		
		private bool _AdopterNewPetOwner;
		
		private string _AdopterBio;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdopterIDChanging(int value);
    partial void OnAdopterIDChanged();
    partial void OnAdopterNameChanging(int value);
    partial void OnAdopterNameChanged();
    partial void OnAdopterPhoneChanging(System.Nullable<int> value);
    partial void OnAdopterPhoneChanged();
    partial void OnAdopterHomeOwnerChanging(bool value);
    partial void OnAdopterHomeOwnerChanged();
    partial void OnAdopterNewPetOwnerChanging(bool value);
    partial void OnAdopterNewPetOwnerChanged();
    partial void OnAdopterBioChanging(string value);
    partial void OnAdopterBioChanged();
    #endregion
		
		public Adopter()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdopterID
		{
			get
			{
				return this._AdopterID;
			}
			set
			{
				if ((this._AdopterID != value))
				{
					this.OnAdopterIDChanging(value);
					this.SendPropertyChanging();
					this._AdopterID = value;
					this.SendPropertyChanged("AdopterID");
					this.OnAdopterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterName", DbType="Int NOT NULL")]
		public int AdopterName
		{
			get
			{
				return this._AdopterName;
			}
			set
			{
				if ((this._AdopterName != value))
				{
					this.OnAdopterNameChanging(value);
					this.SendPropertyChanging();
					this._AdopterName = value;
					this.SendPropertyChanged("AdopterName");
					this.OnAdopterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterPhone", DbType="Int")]
		public System.Nullable<int> AdopterPhone
		{
			get
			{
				return this._AdopterPhone;
			}
			set
			{
				if ((this._AdopterPhone != value))
				{
					this.OnAdopterPhoneChanging(value);
					this.SendPropertyChanging();
					this._AdopterPhone = value;
					this.SendPropertyChanged("AdopterPhone");
					this.OnAdopterPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterHomeOwner", DbType="Bit NOT NULL")]
		public bool AdopterHomeOwner
		{
			get
			{
				return this._AdopterHomeOwner;
			}
			set
			{
				if ((this._AdopterHomeOwner != value))
				{
					this.OnAdopterHomeOwnerChanging(value);
					this.SendPropertyChanging();
					this._AdopterHomeOwner = value;
					this.SendPropertyChanged("AdopterHomeOwner");
					this.OnAdopterHomeOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterNewPetOwner", DbType="Bit NOT NULL")]
		public bool AdopterNewPetOwner
		{
			get
			{
				return this._AdopterNewPetOwner;
			}
			set
			{
				if ((this._AdopterNewPetOwner != value))
				{
					this.OnAdopterNewPetOwnerChanging(value);
					this.SendPropertyChanging();
					this._AdopterNewPetOwner = value;
					this.SendPropertyChanged("AdopterNewPetOwner");
					this.OnAdopterNewPetOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdopterBio", DbType="VarChar(MAX)")]
		public string AdopterBio
		{
			get
			{
				return this._AdopterBio;
			}
			set
			{
				if ((this._AdopterBio != value))
				{
					this.OnAdopterBioChanging(value);
					this.SendPropertyChanging();
					this._AdopterBio = value;
					this.SendPropertyChanged("AdopterBio");
					this.OnAdopterBioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adopter_Animal", Storage="_Animals", ThisKey="AdopterID", OtherKey="AnimalAdopterID")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Adopter = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Adopter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rooms")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private System.Nullable<int> _AnimalID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnAnimalIDChanging(System.Nullable<int> value);
    partial void OnAnimalIDChanged();
    #endregion
		
		public Room()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimalID", DbType="Int")]
		public System.Nullable<int> AnimalID
		{
			get
			{
				return this._AnimalID;
			}
			set
			{
				if ((this._AnimalID != value))
				{
					this.OnAnimalIDChanging(value);
					this.SendPropertyChanging();
					this._AnimalID = value;
					this.SendPropertyChanged("AnimalID");
					this.OnAnimalIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
